{"version":3,"sources":["components/EmployeeList/index.js","App.js","serviceWorker.js","index.js"],"names":["EmployeeList","props","console","log","className","key","person","id","value","name","first","last","dob","date","split","gender","phone","email","App","state","employees","handleNameSort","order","setState","sort","a","b","handleSort","this","onClick","map","employee","React","Component","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","message"],"mappings":"msgCAgBeA,MAdf,SAAsBC,GAEpB,OADAC,QAAQC,IAAIF,GAEV,yBAAKG,UAAU,uDAAuDC,IAAKJ,EAAMK,OAAOC,GAAGC,OACzF,yBAAKJ,UAAU,OAAM,0BAAMA,UAAU,8BAAhB,eAAgEH,EAAMK,OAAOG,KAAKC,OACvG,yBAAKN,UAAU,OAAM,0BAAMA,UAAU,8BAAhB,cAA+DH,EAAMK,OAAOG,KAAKE,MACtG,yBAAKP,UAAU,OAAM,0BAAMA,UAAU,8BAAhB,QAAyDH,EAAMK,OAAOM,IAAIC,KAAKC,MAAM,KAAK,IAC/G,yBAAKV,UAAU,OAAM,0BAAMA,UAAU,8BAAhB,WAA4DH,EAAMK,OAAOS,QAC9F,yBAAKX,UAAU,OAAM,0BAAMA,UAAU,8BAAhB,UAA2DH,EAAMK,OAAOU,OAC7F,yBAAKZ,UAAU,OAAM,0BAAMA,UAAU,8BAAhB,UAA2DH,EAAMK,OAAOW,SC4EpFC,E,4MAhFbC,MAAQ,CACNC,YACAV,MAAO,EACPC,KAAM,EACNM,MAAO,G,EAGTI,eAAiB,SAACZ,EAAMa,GACtB,EAAKC,SAAS,CAAEH,UAAWA,EAAUI,MAAK,SAACC,EAAGC,GAAJ,OAAWD,EAAEhB,KAAKA,GAAQiB,EAAEjB,KAAKA,GAAQa,GAASA,Q,EAG9FK,WAAa,SAAClB,EAAMa,GAClB,EAAKC,SAAS,CAAEH,UAAWA,EAAUI,MAAK,SAACC,EAAGC,GAAJ,OAAWD,EAAEhB,GAAQiB,EAAEjB,GAAQa,GAASA,Q,uDAI1E,IAAD,OACP,OACE,yBAAKlB,UAAU,aACb,6BACE,yBAAKA,UAAU,oCACb,yBAAKA,UAAU,OACb,yBAAKA,UAAU,YAAf,SAGA,uBAAGA,UAAWwB,KAAKT,MAAMT,MAAQ,EAAI,8BAAgC,4BACnEmB,QAAS,WAAQ,EAAKR,eAAe,QAAS,EAAKF,MAAMT,OAAQ,EAAKa,SAAS,CAAEb,OAAQ,EAAKS,MAAMT,YAGxG,yBAAKN,UAAU,cACb,qCAGA,uBAAGA,UAAWwB,KAAKT,MAAMR,KAAO,EAAI,8BAAgC,4BAClEkB,QAAS,WAAQ,EAAKR,eAAe,OAAQ,EAAKF,MAAMR,MAAO,EAAKY,SAAS,CAAEZ,MAAO,EAAKQ,MAAMR,WAGrG,yBAAKP,UAAU,cACb,qCAKF,yBAAKA,UAAU,cACb,wCAKF,yBAAKA,UAAU,cACb,uCAKF,yBAAKA,UAAU,cACb,sCAGA,uBAAGA,UAAWwB,KAAKT,MAAMF,MAAQ,EAAI,8BAAgC,4BACnEY,QAAS,WAAQ,EAAKF,WAAW,QAAS,EAAKR,MAAMF,OAAQ,EAAKM,SAAS,CAAEN,OAAQ,EAAKE,MAAMF,cAKtGW,KAAKT,MAAMC,UAAUU,KAAI,SAACC,GAExB,OACE,kBAAC,EAAD,CACEzB,OAAQyB,Y,GAtENC,IAAMC,WCMJC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDyHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLjD,QAAQiD,MAAMA,EAAMC,c","file":"static/js/main.f2b187f0.chunk.js","sourcesContent":["import React from \"react\";\r\n\r\nfunction EmployeeList(props) {\r\n  console.log(props);\r\n  return (\r\n    <div className=\"employee-row row d-flex flex-column flex-md-row py-2\" key={props.person.id.value}>\r\n      <div className=\"col\"><span className=\"d-inline d-md-none smlabel\">First Name:</span>{props.person.name.first}</div>\r\n      <div className=\"col\"><span className=\"d-inline d-md-none smlabel\">Last Name:</span>{props.person.name.last}</div>\r\n      <div className=\"col\"><span className=\"d-inline d-md-none smlabel\">DOB:</span>{props.person.dob.date.split(\"T\")[0]}</div>\r\n      <div className=\"col\"><span className=\"d-inline d-md-none smlabel\">Gender:</span>{props.person.gender}</div>\r\n      <div className=\"col\"><span className=\"d-inline d-md-none smlabel\">Phone:</span>{props.person.phone}</div>\r\n      <div className=\"col\"><span className=\"d-inline d-md-none smlabel\">Email:</span>{props.person.email}</div>\r\n    </div>\r\n  )\r\n}\r\n\r\nexport default EmployeeList;","import React from 'react';\nimport './App.css';\nimport employees from \"./employees.json\"\nimport EmployeeList from \"./components/EmployeeList\";\n\n\nclass App extends React.Component {\n  state = {\n    employees,\n    first: 1,\n    last: 1,\n    email: 1\n  }\n\n  handleNameSort = (name, order) => {\n    this.setState({ employees: employees.sort((a, b) => (a.name[name] > b.name[name] ? order : -order)) });\n  }\n\n  handleSort = (name, order) => {\n    this.setState({ employees: employees.sort((a, b) => (a[name] > b[name] ? order : -order)) });\n  }\n\n\n  render() {\n    return (\n      <div className=\"container\">\n        <div>\n          <div className=\"header row flex h4 my-0 p-0 py-2\">\n            <div className=\"col\">\n              <div className=\"d-inline\">\n                First\n              </div>\n              <i className={this.state.first > 0 ? \"fas fa-sort-amount-down-alt\" : \"fas fa-sort-amount-up-alt\"}\n                onClick={() => { this.handleNameSort(\"first\", this.state.first); this.setState({ first: -this.state.first }) }}></i>\n            </div>\n\n            <div className=\"col d-flex\">\n              <div>\n                Last\n              </div>\n              <i className={this.state.last > 0 ? \"fas fa-sort-amount-down-alt\" : \"fas fa-sort-amount-up-alt\"}\n                onClick={() => { this.handleNameSort(\"last\", this.state.last); this.setState({ last: -this.state.last }) }}></i>\n            </div>\n\n            <div className=\"col d-flex\">\n              <div>\n                DOB\n              </div>\n            </div>\n\n            <div className=\"col d-flex\">\n              <div>\n                Gender\n              </div>\n            </div>\n\n            <div className=\"col d-flex\">\n              <div>\n                Phone\n              </div>\n            </div>\n\n            <div className=\"col d-flex\">\n              <div>\n                Email\n              </div>\n              <i className={this.state.email > 0 ? \"fas fa-sort-amount-down-alt\" : \"fas fa-sort-amount-up-alt\"}\n                onClick={() => { this.handleSort(\"email\", this.state.email); this.setState({ email: -this.state.email }) }}></i>\n            </div>\n          </div>\n        </div>\n        {\n          this.state.employees.map((employee) => {\n            //console.log(employee)\n            return (\n              <EmployeeList\n                person={employee}\n              />\n            )\n          })\n        }\n      </div >\n    );\n  }\n\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}