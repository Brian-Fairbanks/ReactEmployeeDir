{"version":3,"sources":["components/EmployeeList/index.js","App.js","serviceWorker.js","index.js"],"names":["EmployeeList","props","className","key","person","id","value","src","picture","medium","alt","name","first","last","dob","date","split","gender","phone","email","App","state","employees","sort","search","handleNameSort","order","setState","a","b","handleSort","searchFilter","filter","toLowerCase","includes","replace","type","placeholder","onChange","e","target","this","onClick","length","map","employee","React","Component","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.45bda7f3.chunk.js","sourcesContent":["import React from \"react\";\n\nfunction EmployeeList(props) {\n  // console.log(props);\n  return (\n    <div className=\"personCard card mt-5\" key={props.person.id.value}>\n      <div><img className=\"personThumb\" src={props.person.picture.medium} alt={props.person.name.first + props.person.name.last}/></div>\n      <div className=\"col h5\">{props.person.name.first} {props.person.name.last}</div>\n      <div className=\"col\"> <i className=\"blue fas fa-birthday-cake\"></i> {props.person.dob.date.split(\"T\")[0]}</div>\n      <hr/>\n      <div className=\"col\"> <i className=\"blue fas fa-venus-mars\"></i> {props.person.gender}</div>\n      <hr/>\n      <div className=\"col\"> <i className=\"blue fas fa-phone\"></i> {props.person.phone}</div>\n      <hr/>\n      <div className=\"col\"> <i className=\"blue fas fa-envelope\"></i> {props.person.email}</div>\n    </div>\n  )\n}\n\nexport default EmployeeList;","import React from 'react';\nimport './App.css';\nimport employees from \"./employees.json\"\nimport EmployeeList from \"./components/EmployeeList\";\n\n\nclass App extends React.Component {\n  state = {\n    employees,\n    first: 1,\n    last: 1,\n    email: 1,\n    sort : \"\",\n    search:\"\"\n  }\n\n  handleNameSort = (name, order) => {\n    this.setState({ employees: this.state.employees.sort((a, b) => (a.name[name] > b.name[name] ? order : -order)) });\n  }\n\n  handleSort = (name, order) => {\n    this.setState({ employees: this.state.employees.sort((a, b) => (a[name] > b[name] ? order : -order)) });\n  }\n\n  searchFilter = (name) => {\n    this.setState({\n      employees: employees.filter(person => {\n        return person.name.first.toLowerCase().includes(name.toLowerCase())\n          || person.name.last.toLowerCase().includes(name.toLowerCase())\n          || person.phone.replace(/\\D/g, \"\").includes(name)\n          || person.phone.includes(name)\n      }),\n      search:name\n    })\n  }\n\n\n  render() {\n    return (\n      <div className=\"App\">\n        <div className=\"header\">\n          <div className=\"container py-3 text-center\">\n            <input type=\"text\" placeholder=\"Search\" className=\"form-control text-center\" onChange={(e) => this.searchFilter(e.target.value)} />\n            <div className=\"filter d-flex justify-content-between h4\">\n              <div className=\"\">\n                First Name\n                <i className={this.state.first > 0 ? \"fas fa-sort-amount-down-alt\" : \"fas fa-sort-amount-up-alt\"}\n                  onClick={() => { this.handleNameSort(\"first\", this.state.first); this.setState({ first: -this.state.first, sort:\"first\" }) }}></i>\n              </div>\n\n              <div className=\"\">\n                  Last Name\n                <i className={this.state.last > 0 ? \"fas fa-sort-amount-down-alt\" : \"fas fa-sort-amount-up-alt\"}\n                  onClick={() => { this.handleNameSort(\"last\", this.state.last); this.setState({ last: -this.state.last, sort:\"last\" }) }}></i>\n              </div>\n\n              <div className=\"\">\n                Email\n                <i className={this.state.email > 0 ? \"fas fa-sort-amount-down-alt\" : \"fas fa-sort-amount-up-alt\"}\n                  onClick={() => { this.handleSort(\"email\", this.state.email); this.setState({ email: -this.state.email, sort:\"email\" }) }}></i>\n              </div>\n\n            </div>\n          </div>\n        </div>\n        \n        <div>\n          {this.state.search? `Searching for \"${this.state.search}\" : `: \"\"}\n          Displaying {this.state.employees.length} employees\n          {this.state.sort? `, Sorted by ${this.state.sort} ${this.state[this.state.sort] < 0? \"A-Z\":\"Z-A\"}` : \"\"}\n        </div>\n\n        <div className=\"container flex-wrap\">\n          {\n            this.state.employees.map((employee) => {\n              //console.log(employee)\n              return (\n                <EmployeeList\n                  person={employee}\n                />\n              )\n            })\n          }\n        </div>\n\n      </div >\n    );\n  }\n\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}